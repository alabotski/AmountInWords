package by.lesharb.currency;

import static by.lesharb.messages.MessageConstants.WORD_0;
import static by.lesharb.messages.MessageConstants.WORD_10;
import static by.lesharb.messages.MessageConstants.WORD_100;
import static by.lesharb.messages.MessageConstants.WORD_11;
import static by.lesharb.messages.MessageConstants.WORD_12;
import static by.lesharb.messages.MessageConstants.WORD_13;
import static by.lesharb.messages.MessageConstants.WORD_14;
import static by.lesharb.messages.MessageConstants.WORD_15;
import static by.lesharb.messages.MessageConstants.WORD_16;
import static by.lesharb.messages.MessageConstants.WORD_17;
import static by.lesharb.messages.MessageConstants.WORD_18;
import static by.lesharb.messages.MessageConstants.WORD_19;
import static by.lesharb.messages.MessageConstants.WORD_1_FEMALE;
import static by.lesharb.messages.MessageConstants.WORD_1_MALE;
import static by.lesharb.messages.MessageConstants.WORD_20;
import static by.lesharb.messages.MessageConstants.WORD_200;
import static by.lesharb.messages.MessageConstants.WORD_2_FEMALE;
import static by.lesharb.messages.MessageConstants.WORD_2_MALE;
import static by.lesharb.messages.MessageConstants.WORD_3;
import static by.lesharb.messages.MessageConstants.WORD_30;
import static by.lesharb.messages.MessageConstants.WORD_300;
import static by.lesharb.messages.MessageConstants.WORD_4;
import static by.lesharb.messages.MessageConstants.WORD_40;
import static by.lesharb.messages.MessageConstants.WORD_400;
import static by.lesharb.messages.MessageConstants.WORD_5;
import static by.lesharb.messages.MessageConstants.WORD_50;
import static by.lesharb.messages.MessageConstants.WORD_500;
import static by.lesharb.messages.MessageConstants.WORD_6;
import static by.lesharb.messages.MessageConstants.WORD_60;
import static by.lesharb.messages.MessageConstants.WORD_600;
import static by.lesharb.messages.MessageConstants.WORD_7;
import static by.lesharb.messages.MessageConstants.WORD_70;
import static by.lesharb.messages.MessageConstants.WORD_700;
import static by.lesharb.messages.MessageConstants.WORD_8;
import static by.lesharb.messages.MessageConstants.WORD_80;
import static by.lesharb.messages.MessageConstants.WORD_800;
import static by.lesharb.messages.MessageConstants.WORD_9;
import static by.lesharb.messages.MessageConstants.WORD_90;
import static by.lesharb.messages.MessageConstants.WORD_900;

import by.lesharb.dto.Currency.Sex;
import by.lesharb.dto.Triad;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Currency;
import java.util.List;

/**
 * Please enter description.
 *
 * @author Aliaksei Labotski.
 * @since 2019-08-14.
 */
public class AmountInWords {

    /**
     * Currency mapping interface. Used in order to provide ability for class user to use custom currency
     * implementation.
     */
    public static interface CurrencyMapping<T> {

        Currency getCurrency(T currency);
    }

    /**
     * Default implementation of currency mapping for working with currency implementation provided by this class.
     */
    private static final class DefaultCurrencyMapping implements CurrencyMapping<Currency> {

        public Currency getCurrency(Currency currency) {
            return currency;
        }
    }


    public static List<Currency> getCurrencies() {
        return new ArrayList<Currency>(currencies);
    }


    /**
     * Default currency to be used when method AmountInWords.format(long) is called.
     *
     * @see AmountInWords#format(long)
     */
    private static volatile Currency defaultCurrency = UAH;

    public static Currency getDefaultCurrency() {
        return defaultCurrency;
    }

    /**
     * Set default currency.
     *
     * @param currency currency to be used by default
     * @throws IllegalArgumentException thrown when passing null as parameter
     */
    public static void setDefaultCurrency(Currency currency) {
        if (currency == null) {
            throw new IllegalArgumentException("Default currency should not be null");
        }
        defaultCurrency = currency;
    }


    private static volatile CurrencyMapping<?> currencyMapping = new DefaultCurrencyMapping();

    public static CurrencyMapping getCurrencyMapping() {
        return currencyMapping;
    }

    /**
     * Set custom currency mapping implementation. When parameter is null then currencyMapping is set to
     * DefaultCurrencyMapping instance.
     *
     * @param mapping currency mapping to be used
     */
    public static void setCurrencyMapping(CurrencyMapping mapping) {
        if (mapping == null) {
            currencyMapping = new DefaultCurrencyMapping();
        } else {
            currencyMapping = mapping;
        }
    }


    /**
     * Format amount in words using default currency.
     *
     * @param amount amount to be formatted
     * @return amount in words
     * @see AmountInWords#format(long, Object)
     */
    public static String format(long amount) {
        return format(amount, defaultCurrency);
    }

    /**
     * Format amount in words using the currecy specified.
     *
     * @param amount amount to be formatted
     * @param currency currency to be used
     * @return amount formatted in words as string
     */
    public static <T> String format(long amount, T currency) {
        if (amount > 99999999999999999L || amount < -99999999999999999L) {
            throw new UnsupportedOperationException("Amounts grater than 999'999'999'999'999.00 are not supported.");
        }

        @SuppressWarnings({"unchecked"})
        Currency c = getCurrencyMapping().getCurrency(currency);

        if (c == null) {
            throw new IllegalArgumentException("Currency " + currency + " is not found");
        }

        boolean notEmpty = (amount / 100 / 1000) == 0;

        Triad integerUnits = new Triad(c.oneInteger, c.twoIntegers, c.fiveIntegers, c.integerSex, notEmpty);
        Triad fractionUnits = new Triad(c.oneFraction, c.twoFractions, c.fiveFractions, c.fractionSex, true) {
            @Override
            int getTriadFromAmount(long amount) {
                return (int) (amount % 100);
            }
        };

        List<Triad> triads = Arrays.asList(Triad.TRILLION, Triad.BILLION, Triad.MILLION, Triad.THOUSAND,
                integerUnits, fractionUnits);

        StringBuilder amountInWords = new StringBuilder();
        for (Triad triad : triads) {
            amountInWords.append(triadToWord(triad, triad.getTriadFromAmount(amount)));
        }

        return amountInWords.toString();
    }


    private static String triadToWord(Triad triad, int value) {
        StringBuilder builder = new StringBuilder();

        if (value == 0) {
            if (!triad.isMandatory()) {
                return "";
            }

            if (triad.isZero()) {
                return WORD_0 + " " + ending(triad, value);
            } else {
                return ending(triad, value);
            }
        }

        int hundreds = value / 100;
        int tens = (value % 100) / 10;
        int units = value % 10;

        switch (hundreds) {
            default:
                break;
            case 1:
                builder.append(WORD_100);
                break;
            case 2:
                builder.append(WORD_200);
                break;
            case 3:
                builder.append(WORD_300);
                break;
            case 4:
                builder.append(WORD_400);
                break;
            case 5:
                builder.append(WORD_500);
                break;
            case 6:
                builder.append(WORD_600);
                break;
            case 7:
                builder.append(WORD_700);
                break;
            case 8:
                builder.append(WORD_800);
                break;
            case 9:
                builder.append(WORD_900);
                break;
        }
        if (hundreds > 0) {
            builder.append(' ');
        }

        switch (tens) {
            default:
                break;
            case 2:
                builder.append(WORD_20);
                break;
            case 3:
                builder.append(WORD_30);
                break;
            case 4:
                builder.append(WORD_40);
                break;
            case 5:
                builder.append(WORD_50);
                break;
            case 6:
                builder.append(WORD_60);
                break;
            case 7:
                builder.append(WORD_70);
                break;
            case 8:
                builder.append(WORD_80);
                break;
            case 9:
                builder.append(WORD_90);
                break;
        }

        if (tens == 1) {
            switch (units) {
                case 0:
                    builder.append(WORD_10);
                    break;
                case 1:
                    builder.append(WORD_11);
                    break;
                case 2:
                    builder.append(WORD_12);
                    break;
                case 3:
                    builder.append(WORD_13);
                    break;
                case 4:
                    builder.append(WORD_14);
                    break;
                case 5:
                    builder.append(WORD_15);
                    break;
                case 6:
                    builder.append(WORD_16);
                    break;
                case 7:
                    builder.append(WORD_17);
                    break;
                case 8:
                    builder.append(WORD_18);
                    break;
                case 9:
                    builder.append(WORD_19);
                    break;
            }
        }
        if (tens > 0) {
            builder.append(' ');
        }

        if (tens != 1) {
            switch (units) {
                default:
                    break;
                case 1:
                    builder.append(triad.sex.equals(Sex.MALE) ? WORD_1_MALE : WORD_1_FEMALE);
                    break;
                case 2:
                    builder.append(triad.sex.equals(Sex.MALE) ? WORD_2_MALE : WORD_2_FEMALE);
                    break;
                case 3:
                    builder.append(WORD_3);
                    break;
                case 4:
                    builder.append(WORD_4);
                    break;
                case 5:
                    builder.append(WORD_5);
                    break;
                case 6:
                    builder.append(WORD_6);
                    break;
                case 7:
                    builder.append(WORD_7);
                    break;
                case 8:
                    builder.append(WORD_8);
                    break;
                case 9:
                    builder.append(WORD_9);
                    break;
            }
            if (units > 0) {
                builder.append(' ');
            }
        }

        builder.append(ending(triad, value));

        return builder.toString();
    }

    private static String ending(Triad triad, int value) {
        int tens = (value % 100) / 10;
        int units = value % 10;

        if (tens == 1) {
            return triad.getFive() + " ";
        }

        String ending;
        switch (units) {
            default:
                ending = triad.getFive();
                break;
            case 1:
                ending = triad.getOne();
                break;
            case 2:
            case 3:
            case 4:
                ending = triad.getTwo();
                break;
        }
        return ending + " ";
    }
}
